24/6/24
  - add(4,5)のようにメソッドの後のカッコは、空白を開けないこと！（開けてしまうと、構文エラーが起こる）
  - 変数名はスネークケース。special_priceなど
  ‐ バックスラッシュで特殊な文字の機能を打ち消すことができる。 "Don\'t speak." ← シングルクオートをただの文字列としている

24/6/25
  - 整数同士の割り算は整数となる（小数点以下は切り捨てられる）。小数点以下が必要なら、どちらかの値に小数点.0を付ける
  - 少数を扱う場合は、丸め誤差が起きるので、気を付けておく
  - falseとnil以外はすべて真（数値、文字列も）
  - data = find_data
    if data
      'データがあります'
    else
      'データはありません'
    end

    if文では、変数を書くだけで（if data)、評価される。
    また、putsを書く必要もない

24/6/26
- 文字列はすべてStringクラスのオブジェクト
- 数値は種類によってクラスが異なる。Numeric（数値）クラスの下に、Integer（整数）, Float（実数、小数）, Rational（有理数）, Complex（複素数）クラスがある。

24/6/28
- &&, ||は短絡評価される。左から順に式を評価し、式全体の真偽が確定すると、評価を終了する。1 && nilの時点でnilが確定している
  1 && nil && 3 #=> nil 
- 「if文で否定の条件」を書いているときは、unlessが使える。読みやすい方を使う
- elsifを重ねる場合は、case文が使える
  country = 'Italy'

  case country
  when 'Japan'
    'こんにちは'
  wehn 'Italy'
    'CIao'
  else
    '?'
  end

  #=> "Ciao"

- ifは三項演算子に変換できる
  n = 11
  n > 10 ? '10より大きい' : '10以下'
  #=> "10より大きい"

24/6/28
- ?で終わるメソッドは、慣習として真偽値を返すメソッド
- !で終わるメソッドは、破壊的かどうかに関係なく、安全なメソッドと危険なメソッドの違いを教えるもの
- 全く同じメソッドに複数の名前がついている場合がよくある（lengthとsizeなど）
- Rubyの変数にはオブジェクトそのものではなく、オブジェクトへの参照が格納されている
  a = 'hello'
  b = 'hello'
  c = b
  この場合、aとbは違うオブジェクトだが、bとcは同じオブジェクトとなる
- なので、bを変えるとうっかりcも変わってしまうことがあるので注意が必要
- putsは内部的にto_sメソッドが、pはinspectメソッドが呼び出されている。pは戻り値がある。pの方が開発者向け
- 出力は直接プログラムの実行結果をユーザーに見せるために使用され、戻り値はプログラム内でさらに処理されるために使用される